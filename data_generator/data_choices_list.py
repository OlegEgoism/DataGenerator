import random
import re

from faker import Faker

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º—ë–Ω –∫–æ–ª–æ–Ω–æ–∫
IDENT_RE = re.compile(r"^[a-zA-Z_][a-zA-Z0-9_]*$")

# –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ "–º–∞—Ä–∫–µ—Ä—ã" –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
ALL_CHOICES = [
    "–§–ò–û", "–§–∞–º–∏–ª–∏—è", "–ò–º—è", "–û—Ç—á–µ—Å—Ç–≤–æ", "–õ–æ–≥–∏–Ω", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "–í–æ–∑—Ä–∞—Å—Ç", "–ü–æ–ª",
    "–°—Ç—Ä–∞–Ω–∞", "–ì–æ—Ä–æ–¥", "–ê–¥—Ä–µ—Å", "–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å", "Email", "–¢–µ–ª–µ—Ñ–æ–Ω", "–®–∏—Ä–æ—Ç–∞", "–î–æ–ª–≥–æ—Ç–∞", "–ß–∏—Å–ª–æ —Å –∑–∞–ø—è—Ç–æ–π",
    "–ö–æ–º–ø–∞–Ω–∏—è", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞", "–î–æ–ª–∂–Ω–æ—Å—Ç—å", "–û—Ç–¥–µ–ª",
    "–í–∞–ª—é—Ç–∞", "–°–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã", "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞", "IBAN",
    "–°–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç (–¥–æ 100 –±—É–∫–≤)", "–ó–∞–≥–æ–ª–æ–≤–æ–∫", "–¶–≤–µ—Ç", "–†–µ–π—Ç–∏–Ω–≥ (1-5)", "–¶–µ–Ω–∞",
    "–ü–∞—Ä–æ–ª—å", "IP-–∞–¥—Ä–µ—Å", "–î–æ–º–µ–Ω", "URL", "URI",
    "UUID", "–ß–∏—Å–ª–æ (–±–æ–ª—å—à–æ–µ)", "–ß–∏—Å–ª–æ (–º–∞–ª–µ–Ω—å–∫–æ–µ)", "True/False", "–°–ª—É—á–∞–π–Ω—ã–π —Ö—ç—à", "JSON-–æ–±—ä–µ–∫—Ç",
    "–î–∞—Ç–∞", "–í—Ä–µ–º—è", "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", "–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞", "–î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º", "–î–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º",
    "–ü—Ä–æ—Ñ–µ—Å—Å–∏—è", "–ñ–∏–≤–æ—Ç–Ω–æ–µ", "–ï–¥–∞", "–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å",
    "–°—Ç–∞—Ç—É—Å", "–§–∞–π–ª", "MIME-—Ç–∏–ø", "–ü–∞—Å–ø–æ—Ä—Ç", "–ò–ù–ù", "–°–ù–ò–õ–°", "–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä", "–ù–æ–º–µ—Ä —Å—á—ë—Ç–∞",
    "–ù–æ–º–µ—Ä —Ä–µ–π—Å–∞", "–ü–æ–≥–æ–¥–∞", "–ú–µ—Ç—Ä–∏–∫–∞", "–û—Ü–µ–Ω–∫–∞ (1-10)", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", "–¢–µ–≥", "–ù–∞–≤—ã–∫", "–£—Ä–æ–≤–µ–Ω—å",
    "–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞", "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞", "–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã", "–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞", "–ü–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫", "–ù–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è",
    "–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞", "–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞", "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", "–ö–æ–º–∞–Ω–¥–∞", "–†–æ–ª—å –≤ –∫–æ–º–∞–Ω–¥–µ"
]

# === –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï –¢–ò–ü–û–í PostgreSQL ‚Üí –î–û–ü–£–°–¢–ò–ú–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø ===
# –ö–ª—é—á–∏ ‚Äî —Ç–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ information_schema.columns.data_type
choices_list = {
    # üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ç–∏–ø—ã ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã
    "text": ALL_CHOICES,
    "character varying": ALL_CHOICES,
    "character": ALL_CHOICES,
    "char": ["–ü–æ–ª"],  # –¢–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è

    # üî¢ –ß–∏—Å–ª–æ–≤—ã–µ —Ç–∏–ø—ã
    "smallint": ["–ß–∏—Å–ª–æ (–º–∞–ª–µ–Ω—å–∫–æ–µ)", "–í–æ–∑—Ä–∞—Å—Ç", "–†–µ–π—Ç–∏–Ω–≥ (1-5)", "–û—Ü–µ–Ω–∫–∞ (1-10)"],
    "integer": ["–ß–∏—Å–ª–æ (–º–∞–ª–µ–Ω—å–∫–æ–µ)", "–í–æ–∑—Ä–∞—Å—Ç", "–†–µ–π—Ç–∏–Ω–≥ (1-5)", "–û—Ü–µ–Ω–∫–∞ (1-10)"],
    "bigint": ["–ß–∏—Å–ª–æ (–±–æ–ª—å—à–æ–µ)", "–ò–ù–ù"],  # ‚ùå –°–ù–ò–õ–° –∏ –ù–æ–º–µ—Ä —Å—á—ë—Ç–∞ ‚Äî –ù–ï–¢! –≠—Ç–æ —Å—Ç—Ä–æ–∫–∏!
    "numeric": ["–¶–µ–Ω–∞", "–®–∏—Ä–æ—Ç–∞", "–î–æ–ª–≥–æ—Ç–∞", "–ú–µ—Ç—Ä–∏–∫–∞", "–ß–∏—Å–ª–æ —Å –∑–∞–ø—è—Ç–æ–π"],
    "real": ["–ß–∏—Å–ª–æ —Å –∑–∞–ø—è—Ç–æ–π", "–ú–µ—Ç—Ä–∏–∫–∞"],
    "double precision": ["–ß–∏—Å–ª–æ —Å –∑–∞–ø—è—Ç–æ–π", "–®–∏—Ä–æ—Ç–∞", "–î–æ–ª–≥–æ—Ç–∞", "–ú–µ—Ç—Ä–∏–∫–∞"],

    # üîÄ –õ–æ–≥–∏—á–µ—Å–∫–∏–π
    "boolean": ["True/False", "–°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"],

    # üìÖ –î–∞—Ç–∞/–≤—Ä–µ–º—è
    "date": ["–î–∞—Ç–∞", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "–î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º", "–î–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º"],
    "time without time zone": ["–í—Ä–µ–º—è"],
    "time": ["–í—Ä–µ–º—è"],
    "timestamp without time zone": ["–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", "–î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º", "–î–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º"],
    "timestamp with time zone": ["–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", "–î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º", "–î–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º", "–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞"],

    # üß© –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã
    "uuid": ["UUID"],
    "jsonb": ["JSON-–æ–±—ä–µ–∫—Ç"],
    "bytea": ["–§–∞–π–ª"],

    # ‚ö†Ô∏è –Ø–≤–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    # –≠—Ç–∏ —Ç–∏–ø—ã –±—É–¥—É—Ç –≤—ã–±–∏—Ä–∞—Ç—å—Å—è –ø—Ä–∏ VARCHAR/TEXT
}

# === –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏) ===
ALLOWED_TYPES = {
    "SMALLINT": "SMALLINT",
    "INTEGER": "INTEGER",
    "BIGINT": "BIGINT",
    "SERIAL": "SERIAL",
    "BIGSERIAL": "BIGSERIAL",
    "REAL": "REAL",
    "DOUBLE PRECISION": "DOUBLE PRECISION",
    "FLOAT": "DOUBLE PRECISION",
    "NUMERIC": "NUMERIC",
    "BOOLEAN": "BOOLEAN",
    "CHAR(1)": "CHAR(1)",
    "VARCHAR(255)": "VARCHAR(255)",
    "TEXT": "TEXT",
    "DATE": "DATE",
    "TIME": "TIME",
    "TIMESTAMP": "TIMESTAMP",
    "TIMESTAMPTZ": "TIMESTAMPTZ",
    "UUID": "UUID",
    "JSONB": "JSONB",
    "BYTEA": "BYTEA",
}


def generate_fake_value(column_name, selected_value, fake):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å PostgreSQL.
    """
    try:
        if selected_value == '–§–ò–û':
            return fake.name()
        elif selected_value == '–§–∞–º–∏–ª–∏—è':
            return fake.last_name()
        elif selected_value == '–ò–º—è':
            return fake.first_name()
        elif selected_value == '–û—Ç—á–µ—Å—Ç–≤–æ':
            return fake.middle_name()
        elif selected_value == '–õ–æ–≥–∏–Ω':
            return fake.user_name()
        elif selected_value == '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è':
            return fake.date_of_birth(minimum_age=1, maximum_age=90)
        elif selected_value == '–í–æ–∑—Ä–∞—Å—Ç':
            return fake.random_int(min=1, max=100)
        elif selected_value == '–ü–æ–ª':
            return fake.random_element(['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π'])
        elif selected_value == '–°—Ç—Ä–∞–Ω–∞':
            return fake.country()
        elif selected_value == '–ì–æ—Ä–æ–¥':
            return fake.city()
        elif selected_value == '–ê–¥—Ä–µ—Å':
            return fake.street_address()
        elif selected_value == '–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å':
            return fake.postcode()
        elif selected_value == 'Email':
            return fake.email()
        elif selected_value == '–¢–µ–ª–µ—Ñ–æ–Ω':
            return fake.phone_number()
        elif selected_value == '–®–∏—Ä–æ—Ç–∞':
            return fake.latitude()
        elif selected_value == '–î–æ–ª–≥–æ—Ç–∞':
            return fake.longitude()
        elif selected_value == '–ö–æ–º–ø–∞–Ω–∏—è':
            return fake.company()
        elif selected_value == '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞':
            return fake.word(ext_word_list=[
                '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', '–ö–Ω–∏–≥–∏', '–û–¥–µ–∂–¥–∞', '–ò–≥—Ä—É—à–∫–∏', '–ú–µ–±–µ–ª—å',
                '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ö–æ—Å–º–µ—Ç–∏–∫–∞', '–ü—Ä–æ–¥—É–∫—Ç—ã', '–ú–µ–¥–∏—Ü–∏–Ω–∞', '–°–ø–æ—Ä—Ç'
            ])
        elif selected_value == '–î–æ–ª–∂–Ω–æ—Å—Ç—å':
            return fake.job()
        elif selected_value == '–û—Ç–¥–µ–ª':
            return fake.bs()
        elif selected_value == '–í–∞–ª—é—Ç–∞':
            return fake.currency_name()
        elif selected_value == '–°–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã':
            return fake.currency_symbol()
        elif selected_value == '–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞':
            return fake.credit_card_number()
        elif selected_value == 'IBAN':
            return fake.iban()
        elif selected_value == '–°–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç (–¥–æ 100 –±—É–∫–≤)':
            return fake.text(max_nb_chars=100)
        elif selected_value == '–ó–∞–≥–æ–ª–æ–≤–æ–∫':
            return fake.catch_phrase()
        elif selected_value == '–†–µ–π—Ç–∏–Ω–≥ (1-5)':
            return fake.random_int(min=1, max=5)
        elif selected_value == '–¶–µ–Ω–∞':
            return round(random.uniform(10, 10000), 2)
        elif selected_value == '–¶–≤–µ—Ç':
            return fake.color_name()
        elif selected_value == '–ü–∞—Ä–æ–ª—å':
            return fake.password(length=12, special_chars=True, digits=True, upper_case=True, lower_case=True)
        elif selected_value == 'IP-–∞–¥—Ä–µ—Å':
            return fake.ipv4()
        elif selected_value == '–î–æ–º–µ–Ω':
            return fake.domain_name()
        elif selected_value == 'URL':
            return fake.url()
        elif selected_value == 'URI':
            return fake.uri()
        elif selected_value == 'UUID':
            return fake.uuid4()
        elif selected_value == '–ß–∏—Å–ª–æ (–±–æ–ª—å—à–æ–µ)':
            # –ú–∞–∫—Å–∏–º—É–º –¥–ª—è BIGINT –≤ PostgreSQL
            return fake.random_int(min=1_000_000, max=9_223_372_036_854_775_807)
        elif selected_value == '–ß–∏—Å–ª–æ (–º–∞–ª–µ–Ω—å–∫–æ–µ)':
            return fake.random_int(min=1, max=100)
        elif selected_value == 'True/False':
            return fake.boolean()
        elif selected_value == '–°–ª—É—á–∞–π–Ω—ã–π —Ö—ç—à':
            return fake.sha256()
        elif selected_value == 'JSON-–æ–±—ä–µ–∫—Ç':
            return fake.json(indent=2)
        elif selected_value == '–î–∞—Ç–∞':
            return fake.date()
        elif selected_value == '–í—Ä–µ–º—è':
            return fake.time()
        elif selected_value == '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è':
            return fake.date_time()
        elif selected_value == '–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞':
            return fake.timezone()
        elif selected_value == '–î–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º':
            return fake.past_date()
        elif selected_value == '–î–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º':
            return fake.future_date()
        elif selected_value == '–ß–∏—Å–ª–æ —Å –∑–∞–ø—è—Ç–æ–π':
            return round(random.uniform(0.1, 10000.0), 2)
        elif selected_value == '–ü—Ä–æ—Ñ–µ—Å—Å–∏—è':
            return fake.job()
        elif selected_value == '–ñ–∏–≤–æ—Ç–Ω–æ–µ':
            return fake.random_element([
                '–°–æ–±–∞–∫–∞', '–ö–æ—à–∫–∞', '–ü–æ–ø—É–≥–∞–π', '–•–æ–º—è–∫', '–ß–µ—Ä–µ–ø–∞—Ö–∞', '–ó–º–µ—è', '–ö—Ä–æ–ª–∏–∫', '–†—ã–±–∞'
            ])
        elif selected_value == '–ï–¥–∞':
            if hasattr(fake, 'dish'):
                return fake.dish()
            return fake.random_element([
                '–ü–∏—Ü—Ü–∞', '–°—É—à–∏', '–ë—É—Ä–≥–µ—Ä', '–ü–∞—Å—Ç–∞', '–°–∞–ª–∞—Ç', '–°—É–ø', '–ö–∞—Ä—Ç–æ—à–∫–∞', '–°—Ç–µ–π–∫'
            ])
        elif selected_value == '–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è':
            return fake.random_element([
                'Python', 'JavaScript', 'Java', 'C++', 'Go', 'Rust', 'Ruby', 'PHP', 'Swift', 'Kotlin'
            ])
        elif selected_value == '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ':
            return fake.random_element([
                '–°–º–∞—Ä—Ç—Ñ–æ–Ω', '–ù–æ—É—Ç–±—É–∫', '–ü–ª–∞–Ω—à–µ—Ç', '–ß–∞—Å—ã', '–ù–∞—É—à–Ω–∏–∫–∏', '–ú–æ–Ω–∏—Ç–æ—Ä'
            ])
        elif selected_value == '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å':
            return fake.random_element([
                'VK', 'Telegram', 'Instagram', 'Facebook', 'Twitter', 'LinkedIn', 'TikTok'
            ])
        elif selected_value == '–°—Ç–∞—Ç—É—Å':
            return fake.random_element(['–ê–∫—Ç–∏–≤–µ–Ω', '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω', '–û–∂–∏–¥–∞–Ω–∏–µ', '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω', '–í —Å–µ—Ç–∏'])
        elif selected_value == '–§–∞–π–ª':
            return fake.file_name()
        elif selected_value == 'MIME-—Ç–∏–ø':
            return fake.mime_type()
        elif selected_value == '–ü–∞—Å–ø–æ—Ä—Ç':
            series = f"{fake.random_int(10, 99)} {fake.random_int(10, 99)}"
            number = fake.random_number(digits=6, fix_len=True)
            return f"{series} {number}"
        elif selected_value == '–ò–ù–ù':
            return str(fake.random_number(digits=12, fix_len=True))
        elif selected_value == '–°–ù–ò–õ–°':
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É: XXX-XXX-XXX XX
            n1 = fake.random_number(digits=3, fix_len=True)
            n2 = fake.random_number(digits=3, fix_len=True)
            n3 = fake.random_number(digits=3, fix_len=True)
            n4 = fake.random_number(digits=2, fix_len=True)
            return f"{n1}-{n2}-{n3} {n4}"
        elif selected_value == '–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä':
            letter = fake.random_uppercase_letter()
            digits = fake.random_number(digits=3, fix_len=True)
            region = fake.random_int(1, 99)
            return f"–ê{letter}{digits}{region}"
        elif selected_value == '–ù–æ–º–µ—Ä —Å—á—ë—Ç–∞':
            # –í—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞: 20 —Ü–∏—Ñ—Ä
            return ''.join([str(fake.random_digit()) for _ in range(20)])
        elif selected_value == '–ù–æ–º–µ—Ä —Ä–µ–π—Å–∞':
            airline = fake.lexify('??').upper()
            number = fake.random_number(digits=4)
            return f"{airline}{number}"
        elif selected_value == '–ü–æ–≥–æ–¥–∞':
            return fake.random_element(['–°–æ–ª–Ω–µ—á–Ω–æ', '–î–æ–∂–¥—å', '–û–±–ª–∞—á–Ω–æ', '–°–Ω–µ–≥', '–¢—É–º–∞–Ω', '–ì—Ä–æ–∑–∞'])
        elif selected_value == '–ú–µ—Ç—Ä–∏–∫–∞':
            return round(random.uniform(0.0, 1000.0), 3)
        elif selected_value == '–û—Ü–µ–Ω–∫–∞ (1-10)':
            return fake.random_int(min=1, max=10)
        elif selected_value == '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π':
            return fake.sentence(nb_words=10)
        elif selected_value == '–¢–µ–≥':
            return f"#{fake.word()}"
        elif selected_value == '–ù–∞–≤—ã–∫':
            return fake.job()
        elif selected_value == '–£—Ä–æ–≤–µ–Ω—å':
            return fake.random_element(['–ù–∞—á–∏–Ω–∞—é—â–∏–π', '–°—Ä–µ–¥–Ω–∏–π', '–û–ø—ã—Ç–Ω—ã–π', '–≠–∫—Å–ø–µ—Ä—Ç'])
        elif selected_value == '–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞':
            return fake.catch_phrase()
        elif selected_value == '–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞':
            return fake.file_extension()
        elif selected_value == '–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã':
            return fake.country_code()
        elif selected_value == '–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞':
            return fake.random_int(1, 99)
        elif selected_value == '–ü–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫':
            return fake.random_int(1, 999)
        elif selected_value == '–ù–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è':
            return f"–û—Ç–¥–µ–ª-{fake.random_int(1, 50)}"
        elif selected_value == '–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞':
            return fake.random_element(['–ü–∞—Å–ø–æ—Ä—Ç', '–£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ', '–î–æ–≥–æ–≤–æ—Ä', '–°–ø—Ä–∞–≤–∫–∞', '–ó–∞—è–≤–ª–µ–Ω–∏–µ'])
        elif selected_value == '–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞':
            num = fake.random_number(digits=6, fix_len=True)
            return f"–î–û–ì-{num}"
        elif selected_value == '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞':
            return fake.bs()
        elif selected_value == '–ö–æ–º–∞–Ω–¥–∞':
            return f"{fake.company()} –ö–æ–º–∞–Ω–¥–∞"
        elif selected_value == '–†–æ–ª—å –≤ –∫–æ–º–∞–Ω–¥–µ':
            return fake.random_element(['–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', '–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫', '–ê–Ω–∞–ª–∏—Ç–∏–∫', '–ú–µ–Ω–µ–¥–∂–µ—Ä', '–î–∏–∑–∞–π–Ω–µ—Ä'])
        else:
            return fake.text(max_nb_chars=20)

    except Exception as e:
        # –ù–∞ —Å–ª—É—á–∞–π –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ –≤ Faker
        return f"err_{str(e)[:20]}"